include ../widgets/page/banner
if theme.says.enable
    if theme.says.source === 'memos'
        #bber
            section.timeline.page-1
                ul.list.waterfall
                    .bber-loading
                        img(src="https://image.talen.top/web/loading.gif")
                    script.
                        (async function () {
                            let url = '!{url_for(theme.says.link)}';
                            const baseUrl = url.substring(0, url.indexOf("/", url.indexOf("//") + 2));
                            const response = await fetch(url);
                            const data = await response.json();
                            const strip = !{theme.says.strip};
                            let items = [],
                                topitem = [],
                                essayTips = '';

                            const processedData = await Promise.all(data.map(async (item) => {
                                const formatdata = await essayFormat(item,baseUrl);
                                if (!formatdata) return null;
                                if (item.content.includes('#top')) {
                                    topitem.push(formatdata);
                                } else {
                                    items.push(formatdata);
                                }
                                return formatdata;
                            }));

                            essayTips = strip === -1 || strip >= items.length ? `<div id="bber-tips">- 已展开所有短文 -</div>` : (items = items.slice(0, strip), `<div id="bber-tips">- 只展示最近 ${strip} 条短文 -</div>`);

                            document.getElementsByClassName('list')[0].innerHTML = topitem.concat(items).filter(item => item !== null).join('');
                            document.querySelector("#bber").insertAdjacentHTML("beforeend", essayTips);
                        })();
                    case theme.says.style
                        when 0
                            script.
                                async function essayFormat(item,baseUrl) {
                                    const contentRegex = /#(.*?)\s|\n/g,
                                        imageRegex = /\!\[(.*?)\]\((.*?)\)/g,
                                        playerRegex = /{\s*player\s*(.*)\s*}/g,
                                        linkRegex = /(?<!\!)\[(.*?)\]\((.*?)\)/g,
                                        topRegex = /#top/g,
                                        fromRegex = /(?<![\w\/])(?<!\{)\{([^{}\s]+)\}(?!\})(?![\w\/])/g;
                                    let time = new Date((item.createdTs - (new Date().getTimezoneOffset() * 60)) * 1000).toISOString(),
                                        content = item.content,
                                        image = '',
                                        img = content.match(imageRegex);
                                        aplayer = content.match(/{\s*music\s*(.*?)\s*(.*?)\s*}/g),
                                        video = content.match(playerRegex),
                                        link = content.match(linkRegex),
                                        type = '',
                                        from = content.match(fromRegex);
                                    
                                    if (item.resourceList.length) {
                                        if (!img) img = [];  
                                        item.resourceList.forEach(e => {
                                            if (e.externalLink) img.push(e.externalLink);
                                            else img.push(`${baseUrl}/o/r/${e.uid}`);
                                        });
                                    }
                                    if (img) image += img.map(e => `<img src="${e.replace(imageRegex, '$2')}" alt="${e.replace(imageRegex, '$1')}" />`).join('');
                                    aplayer = aplayer ? `<div class="bber-music"><meting-js server="${aplayer[0].match(/\{\s*music\s*(.*?)\s*\d+\s*\}/)[1]}" type="song" id="${aplayer[0].match(/\d+/)[0]}" mutex="true" preload="none" theme="var(--flec-main)" data-lrctype="0"></meting-js></div>` : '';
                                    video = video ? `<div class="bber-video"><video src="${video[0].replace(playerRegex, '$1').trim()}" controls="controls" style="object-fit: cover;"></video></div>` : content.match(/{\s*bilibili\s*(.*?)\s*}/g);
                                    video = Array.isArray(video) ? `<div class="bber-video"><iframe src="//player.bilibili.com/player.html?bvid=${video[0].match(/(BV\w+)/)[1]}${video[0].match(/{\s*bilibili\s*(.*?)\s*true\s*}/g) ? '&autoplay=1' : '&autoplay=0'}" scrolling="no" bozrder="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></div>` : '';
                                    link = link ? ((type = link[0].replace(linkRegex, '$2')), `<a class="bber-content-link" href='${type.startsWith('/') ? type : (type.startsWith('http') ? type : 'https://' + type)}' target="_blank">${link[0].replace(linkRegex, '$1') ? ('@' + link[0].replace(linkRegex, '$1')) : '跳转到短文指引的链接' }</a>`) : '';
                                    from = from ? `<div class="bber-info-from"><i class="flecicon flec-hashtag-solid"></i>${from[0].replace(fromRegex, '$1')}</div>` : '';
                                    content = content.replace(contentRegex, '').replace(imageRegex, '').replace(/\{(.*?)\}/g, '').replace(linkRegex, '').trim();

                                    return `
                                        <li class="item">
                                            <div class="meta">
                                                <img class="no-lightbox nolazyload avatar" src="!{theme.aside.card.author.img || theme.site.avatar}">
                                                <div class="info">
                                                    <span class="bber_nick">#{config.author}</span>
                                                    <time class="datetime bber_date" datetime="${time}"></time>
                                                </div>
                                                ${content ? `<a class="bber-reply goComment" onclick="flec.toTalk('${content}')"><i class="flecicon flec-chat-fill" style="font-size: 1rem;"></i></a>` : ''}
                                            </div>
                                            <div id="bber-content">
                                                ${content ? `<p class="bber-content"><span>${content}</span>${link}</p>` : ''}
                                                ${image ? `<div class="bber-content-img">${image}</div>` : ''}
                                            </div>
                                            ${aplayer}
                                            ${video}
                                            <div class="bber-bottom">
                                                <div class="bber-info">
                                                    ${item.content.includes('#top') ? `<div class="bber-info-top"><i class="flecicon flec-thumbtack-solid"></i>置顶</div>` : ''}
                                                    ${from}
                                                </div>
                                            </div>
                                        </li>`;
                                }

    if theme.says.source === 'json'
        #bber
            section.timeline.page-1
                ul.list.waterfall
                    .bber-loading
                        img(src="https://image.talen.top/web/loading.gif")
                    script.
                        (async function () {
                            const response = await fetch('!{url_for(theme.says.link)}');
                            const data = await response.json();
                            const strip = !{theme.says.strip};
                            let items = [],
                                topitem = [],
                                essayTips = '',
                                listResult = '';

                            const processedData = await Promise.all(data[0].essay_list.map(async (item) => {
                                const formatdata = await essayFormat(item);
                                if (!formatdata) return null;
                                if (item.top) {
                                    topitem.push(formatdata);
                                } else {
                                    items.push(formatdata);
                                }
                                return formatdata;
                            }));

                            essayTips = strip === -1 || strip >= items.length ? `<div id="bber-tips">- 已展开所有短文 -</div>` : (items = items.slice(0, strip), `<div id="bber-tips">- 只展示最近 ${strip} 条短文 -</div>`);

                            document.getElementsByClassName('list')[0].innerHTML = topitem.concat(items).filter(item => item !== null).join('');
                            document.querySelector("#bber").insertAdjacentHTML("beforeend", essayTips);
                        })();
                    case theme.says.style
                        when 0
                            script.
                                async function essayFormat(item) {
                                    let image = '',
                                        video = '',
                                        type = '';
                                    if (item.image) item.image.map(e => image += `<img src="${e.split(' || ')[0]}" ${e.split(' || ').length > 1 ? `alt='${e.split(' || ')[1]}'` : ''} />`).join('');
                                    let aplayer = item.aplayer ? `<div class="bber-music"><meting-js server="${item.aplayer.server}" type="song" id="${item.aplayer.id}" mutex="true" preload="none" theme="var(--efu-main)" data-lrctype="0"></meting-js></div>` : '';
                                    if (item.video) video = item.video.player ? `<div class="bber-video"><video src="${item.video.player}" controls="controls" style="object-fit: cover;"></video></div>` : item.video.bilibili ? `<div class="bber-video"><iframe src="//player.bilibili.com/player.html?bvid=${item.video.bilibili.match(/(BV\w+)/)[1]}${item.video.autoplay ? '&autoplay=1' : '&autoplay=0'}" scrolling="no" bozrder="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></div>` : '';
                                    let link = item.link ? ((type = item.link.split(' || ')), `<a class="bber-content-link" href='${type[0].startsWith('/') ? type[0] : (type[0].startsWith('http') ? type[0] : 'https://' + type[0])}' target="_blank">${type.length > 1 ? ('@' + type[1]) : '跳转到短文指引的链接' }</a>`) : '';
                                    
                                    return `
                                        <li class="item">
                                            <div class="meta">
                                                <img class="no-lightbox nolazyload avatar" src="!{theme.aside.card.author.img || theme.site.avatar}">
                                                <div class="info">
                                                    <span class="bber_nick">#{config.author}</span>
                                                    <time class="datetime bber_date" datetime="${item.date}"></time>
                                                </div>
                                                ${item.content ? `<a class="bber-reply goComment" onclick="sco.toTalk('${item.content}')"><i class="flecicon flec-chat-fill" style="font-size: 1rem;"></i></a>` : ''}
                                            </div>
                                            <div id="bber-content">
                                                ${item.content ? `<p class="bber-content"><span>${item.content}</span>${link}</p>` : ''}
                                                ${image ? `<div class="bber-content-img">${image}</div>` : ''}
                                            </div>
                                            ${aplayer}
                                            ${video}
                                            <div class="bber-bottom">
                                                <div class="bber-info">
                                                    ${item.top ? `<div class="bber-info-top"><i class="flecicon flec-thumbtack-solid"></i>置顶</div>` : ''}
                                                    ${item.from ? `<div class="bber-info-from"><span>${item.from}</span></div>` : ''}
                                                </div>
                                            </div>
                                        </li>`;
                                }